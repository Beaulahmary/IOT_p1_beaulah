
IoT Sensor Code:
Here's a simplified Python example for a hypothetical IoT noise sensor using a Raspberry Pi and a USB microphone:

import sounddevice as sd
import numpy as np
import requests 

# Configure sensor and data transmission
sensor_id = "sensor_001"
api_url = "https://your-platform-api.com/data"

def measure_noise_level():
    audio_data = sd.rec(44100, dtype='float64', channels=1)
    sd.wait()
    noise_level = np.max(audio_data)
    return noise_level 

while True:
    noise_level = measure_noise_level()
    data = {"sensor_id": sensor_id, "noise_level": noise_level}
    response = requests.post(api_url, json=data)

Platform Backend (using Python and Flask):
This is a simplified example of a Python Flask API for data storage and retrieval:

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'your_database_url'
db = SQLAlchemy(app)

class NoiseData(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    sensor_id = db.Column(db.String(50))
    noise_level = db.Column(db.Float)

@app.route('/data', methods=['POST'])
def receive_sensor_data():
    data = request.json
    noise_data = NoiseData(sensor_id=data['sensor_id'], noise_level=data['noise_level'])
    db.session.add(noise_data)
    db.session.commit()
    return jsonify({"message": "Data received successfully"})

if __name__ == '__main__':
    app.run(debug=True)

Mobile App Code (using Flutter for a cross-platform app):
Here's a simple Flutter code snippet for a mobile app to fetch and display noise data:

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: NoiseDataScreen(),
    );
  }
}

class NoiseDataScreen extends StatefulWidget {
  @override
  _NoiseDataScreenState createState() => _NoiseDataScreenState();
}

class _NoiseDataScreenState extends State<NoiseDataScreen> {
  List<dynamic> noiseData = [];

  @override
  void initState() {
    super.initState();
    fetchData();
  }

  Future<void> fetchData() async {
    final response = await http.get('https://your-platform-api.com/data');
    if (response.statusCode == 200) {
      setState(() {
        noiseData = json.decode(response.body);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Noise Data'),
      ),
      body: ListView.builder(
        itemCount: noiseData.length,
        itemBuilder: (context, index) {
          return ListTile(
            title: Text('Sensor ID: ${noiseData[index]['sensor_id']}'),
            subtitle: Text('Noise Level: ${noiseData[index]['noise_level']}'),
          );
        },
      ),
    );
  }
}
